
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cart      Cart?
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  images      String[]  
  features    String[] 
  sizes       String[] 
  colors      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
    id        Int      @id @default(autoincrement())
    cartId    Int
    cart      Cart     @relation(fields: [cartId], references: [id])
    productId Int
    product   Product  @relation(fields: [productId], references: [id])
    quantity  Int
    size      String?  // Yeni eklenen
    color     String?  // Yeni eklenen
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  status    OrderStatus @default(PENDING)
  items     OrderItem[]
  total     Float
  payment   Payment?    
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  size      String?  // Yeni eklenen
  color     String?  // Yeni eklenen
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Payment {
  id          Int           @id @default(autoincrement())
  orderId     Int          @unique
  order       Order        @relation(fields: [orderId], references: [id])
  amount      Float
  status      PaymentStatus @default(PENDING)
  cardNumber  String?      // Son 4 hane
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}